@*@page "/settings"*@
@namespace HVMDash.Client.Components
@using HVMDash.Shared
@using System.Net.Http.Json
@using System.Text.Json


@inject ISnackbar Snackbar
@inject HttpClient Http
@*@bind-Time="time*@
<MudTimePicker PickerVariant="PickerVariant.Dialog" Label="Posts delay" Time="@time" TimeChanged="@(()=>OnTimePickerChange(time))" TimeEditMode="TimeEditMode.Normal" Color="Color.Success" />
<MudSwitch @bind-Checked="@useApi" Color="Color.Secondary">Use ApiWS: @useApi</MudSwitch>
@*<VKAccounts/>*@

@code {

    TimeSpan? time { get; set; }
    private SimpleSettings config;
    private bool useApi { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string reqAdress = $"api/Configuration";
        var response = await Http.GetFromJsonAsync<object>(reqAdress);

        string jsonString = JsonSerializer.Serialize(response);

        config = JsonSerializer.Deserialize<SimpleSettings>(jsonString);

        time = new TimeSpan(config.HoursPeriod, config.MinutesPeriod, 00);
        useApi = config.UseApiWs;

    }

    protected async Task OnTimePickerChange(TimeSpan? time)
    {
        var changedHours = time.Value.Hours;
        var changedMinutes = time.Value.Minutes;

        config.HoursPeriod = changedHours;
        config.MinutesPeriod = changedMinutes;
        config.UseApiWs = useApi;

        string reqAdress = $"api/Configuration/{config.Id}";
        var response = await Http.PutAsJsonAsync(reqAdress, config);
        Console.WriteLine(response.Content);

        StateHasChanged();
        await OnInitializedAsync();
    }

}
