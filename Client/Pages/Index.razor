@page "/"
@using HVMDash.Client.Components
@using HVMDash.Shared
@using HVMDash.Client.Pages
@using Microsoft.AspNetCore.SignalR.Client
@using System
@using System.Text

@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@inject HttpClient Http

@using Microsoft.JSInterop
@inject IJSRuntime JS

<style>
    textarea#consoleTextarea {
        background-color: #202020;
        color: forestgreen;
    }
</style>


@functions{
    ElementReference TextAreaRef;
    //MudTextField<string> TextAreaRef;

    void ScrollToEnd()
    {
        JS.InvokeVoidAsync("scrollToEnd", new object[] { TextAreaRef });
    }
}


<h1>Dashboard</h1>

@*<MudPaper Class="pa-16 ma-2">*@

<MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
    @*<PostsCarousel />*@
</MudHidden>

<ParserComponent />

@*<MudTabs Elevation="1" Rounded="true" Centered="true" PanelClass="pa-6">
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <MudTabPanel Text="Posts" ToolTip="Posts Component">
                <PostsComponent />
            </MudTabPanel>
        </MudHidden>
        <MudTabPanel Text="Playlists" ToolTip="Playlists Component">
            <PlaylistsEdit ronly="true" />
        </MudTabPanel>
        <MudTabPanel Text="Photostocks" ToolTip="Photostocks Component">
            <Photostocks ronly="true" />
        </MudTabPanel>
    </MudTabs>*@
@*</MudPaper>*@

@*<div class="form-group">
        <label>
            User:
            <input @bind="userInput" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>*@

@*<ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>*@


<MudTextField ReadOnly="true" Clearable="true" T="string" Label="vkaudioposter" Variant="Variant.Filled" Lines="30" Text="@sb.ToString()" ></MudTextField>

@*<textarea id="consoleTextarea" @ref=TextAreaRef value="@sb.ToString()" class="form-control" rows="20"></textarea>*@


@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    StringBuilder sb = new StringBuilder();
    //private string userInput;
    //private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/commandshub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            //var encodedMsg = $"{user}: {message}";
            var encodedMsg = $"[{DateTime.Now}]: {user} - {message}";
            messages.Add(encodedMsg);
            sb.AppendLine(encodedMsg);
            //ScrollToEnd();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    //async Task Send() =>
    //    await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
