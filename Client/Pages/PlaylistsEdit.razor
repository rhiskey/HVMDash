@page "/playlistsedit"
@namespace HVMDash.Client.Pages
@using HVMDash.Shared
@using vkaudioposter_ef.parser
@using System.Net.Http.Json
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@using System.IO

@inject ISnackbar Snackbar
@inject IJSRuntime js
@inject HttpClient Http
@implements IAsyncDisposable

<h1>Edit Playlists</h1>

<MudExpansionPanels>
    <MudExpansionPanel>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3"></MudIcon>
                <MudText>Create</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudCard>
                <MudCardContent>
                    @*<MudFocusTrap DefaultFocus="DefaultFocus">*@
                    @*<MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">*@
                    @if (!String.IsNullOrWhiteSpace(playlistImage))
                    {
                        <MudCardMedia Image="@playlistImage" />
                        <MudChip>@playlistToCreate.FollowersTotal</MudChip>
                    }
                    <MudTextField AutoFocus="false" FullWidth="true" @bind-Value="@playlistToCreate.PlaylistId" Label="Spotify URI" Immediate="true" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(CheckUri))" @ref="spotiLinkField" Required="true"></MudTextField>
                    <MudTextField @bind-Value="@playlistToCreate.PlaylistName" Label="Name" Variant="Variant.Outlined" Immediate="true" @ref="spotiNameField"></MudTextField>
                    @*<MudSlider @bind-Value="@playlistToCreate.Mood" Min="0" Max="10" Color="Color.Info">Mood: @playlistToCreate.Mood.ToString()</MudSlider>*@
                    <MudSwitch @bind-Checked="@playlistToCreate.Status" Color="Color.Secondary">Status: @playlistToCreate.Status</MudSwitch>
                    @*</MudFocusTrap>*@
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" OnClick="@OnCreateClick">Create</MudButton>
                </MudCardActions>
            </MudCard>

            <MudTr>

            </MudTr>
            <br />
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

<br />


@if (Playlists.Count() == 0 || Playlists == null)
{
    <p><em>Loading...</em></p>
    @*<MudSkeleton />*@
    @*<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />*@
    @*<MudProgressCircular Color="Color.Default" Indeterminate="true" />*@

    <MudSimpleTable>
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" />

            </tr>
        </tbody>

    </MudSimpleTable>
}
else
{
    <MudTable Items="@Playlists" Dense="@dense" Hover="@hover" ReadOnly="@ronly" Filter="new Func<Playlist,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" MultiSelection="true" @bind-SelectedItems="selectedItems" SortLabel="Sort By" CommitEditTooltip="Commit Edit" OnCommitEditClick="@OnCommitEditClick">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Playlists</MudText>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col />
            <col style="width:10px;" />

            <col style="width:10px;" />
            <col style="width:20px;" />

            <col style="width:20px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Playlist, object>(x=>x.PlaylistId)">Spotify URI</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Playlist, object>(x=>x.PlaylistName)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Playlist, object>(x=>x.FollowersTotal)">Followers</MudTableSortLabel></MudTh>
            @*<MudTh><MudTableSortLabel SortBy="new Func<Playlist, object>(x=>x.Mood)">Mood</MudTableSortLabel></MudTh>*@
            <MudTh><MudTableSortLabel SortBy="new Func<Playlist, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Playlist, object>(x=>x.UpdateDate)">UpdateDate</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="URI">
                <MudLink Href="@Formatters.CreateSpotifyLinkFromUri(context.PlaylistId)" Target="_blank">
                    <MudHighlighter Text="@context.PlaylistId" HighlightedText="@searchString" />
                    <MudCard><MudCardMedia Image="@context.ImageUrl" Height="100" /></MudCard>
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Playlist Name">
                @*@onmouseover="ToggleImagePreviewOpen"*@
                <MudHighlighter Text="@context.PlaylistName" HighlightedText="@searchString" />
                <!--<MudPopover Open="@_isOpenImagePlaylist" Class="pa-4">-->
                @*<div class="d-flex flex-column">*@
                <!--<MudCard><MudCardMedia Image="@context.ImageUrl" Height="100" /></MudCard>
                <MudButton OnClick="@ToggleImagePreviewOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>-->
                @*</div>*@
                <!--</MudPopover>-->
            </MudTd>
            <MudTd DataLabel="Followers"><MudChip>@context.FollowersTotal</MudChip></MudTd>
            @*<MudTd DataLabel="Mood">@context.Mood</MudTd>*@
            <MudTd DataLabel="Status">
                @switch (context.Status)
                    {
                        case 0:
                            {<MudText Color="Color.Error">Off</MudText>}
                            break;
                        case 1:
                            { <MudText Color="Color.Success">On</MudText>}
                            break;
                        default:
                            break;
                    }
            </MudTd>
            <MudTd DataLabel="Update Date">@Formatters.FormatDateTime(context.UpdateDate)</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="URI">
                <MudTextField @bind-Value="@context.PlaylistId" Required />
            </MudTd>
            <MudTd DataLabel="Name">
                <MudTextField @bind-Value="@context.PlaylistName" Required />
            </MudTd>
            <MudTd><MudChip>@context.FollowersTotal</MudChip></MudTd>
            @*<MudTd DataLabel="Mood">
                <MudSlider @bind-Value="@context.Mood" Min="0" Max="10" Color="Color.Info">Value: @context.Mood.ToString()</MudSlider>
            </MudTd>*@
            <MudTd DataLabel="Status">
                <MudSwitch @bind-Checked="@context.Status" Color="Color.Secondary">int: @context.Status</MudSwitch>
            </MudTd>
            <MudTd DataLabel="Update Date">@Formatters.FormatDateTime(context.UpdateDate)</MudTd>
            <MudTd>
                <MudButton Color="Color.Error" OnClick="@(() => DeleteClick(context.Id))">Delete</MudButton>
            </MudTd>
        </RowEditingTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>

    </MudTable>
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
    @*<MudText Inline="true">Selected: @selectedItem?.PlaylistName</MudText>*@
    <MudText Inline="true">Selected items: @(selectedItems==null ? "" : string.Join(", ", selectedItems.OrderBy(x=>x.PlaylistName).Select(x=>x.PlaylistName)))</MudText>
    <br />
    @if (selectedItems.Count > 0)
    {
        <MudButton @onclick="SelectStatusModal" Color="Color.Secondary" Variant="Variant.Filled">Change Status</MudButton>
        <MudButton @onclick="DeleteSelected" Color="Color.Secondary" Variant="Variant.Filled">Delete Selected</MudButton>
    }
    <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Deleting can <b><i>not</i></b> be undone!
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
        </YesButton>
    </MudMessageBox>

    <MudMessageBox @ref="mboxImport" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Importing playlists
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.UploadFile">Upload!</MudButton>
        </YesButton>
    </MudMessageBox>

}

<InputFile id="fileInput112" OnChange="UploadFiles" hidden accept=".json" /> @*multiple*@
<MudButtonGroup Color="Color.Primary" Variant="Variant.Text">
    <MudButton HtmlTag="label"
               StartIcon="@Icons.Filled.CloudUpload"
               for="fileInput112">
        Import
    </MudButton>

    <MudButton OnClick="@(() => ExportPlaylistData())"
               StartIcon="@Icons.Filled.ImportExport">
        Export
    </MudButton>

    <MudButton OnClick="@(() => UpdatePlaylistImagesAndFollowers())"
               StartIcon="@Icons.Filled.Image">
        Update Images and Followers
    </MudButton>
</MudButtonGroup>

<MudProgressLinear Color="Color.Secondary" Value="@UpdateProgressValue" Class="my-7" />

<br />
<br />


@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private IJSObjectReference module;

    MudMessageBox mbox { get; set; }
    MudMessageBox mboxImport { get; set; }
    string state = "Message box hasn't been opened yet";

    private bool dense = false;
    private bool hover = true;
    public bool _isOpenImagePlaylist;

    [Parameter]
    public bool ronly { get; set; }

    private string searchString = "";
    private Playlist selectedItem = null;
    private Playlist playlistToCreate = new Playlist();
    private HashSet<Playlist> selectedItems = new HashSet<Playlist>();

    private IEnumerable<Playlist> Playlists = new List<Playlist>();

    public int isEnabled { get; set; } = 1;
    private bool isStatusEnabled { get; set; }

    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;

    IList<string> fileNames = new List<string>();
    private string playlistImage;


    MudTextField<string> spotiLinkField, spotiNameField;
    public int UpdateProgressValue { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Playlists = await Http.GetFromJsonAsync<List<Playlist>>("api/Playlists");

        //UpdatePlaylistImagesAndFollowers();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await js.InvokeAsync<IJSObjectReference>("import",
                "./js/SaveFile.js");
        }
    }


    private bool FilterFunc(Playlist element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.PlaylistName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PlaylistId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private async Task OnCommitEditClick()
    {
        Snackbar.Add("Commit Edit Handler Invoked");

        selectedItem.UpdateDate = DateTime.Now; //TODO

        string reqAdress = $"api/Playlists/{selectedItem.Id}";
        var response = await Http.PutAsJsonAsync(reqAdress, selectedItem);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Edited Successfull", MudBlazor.Severity.Success);
            await OnInitializedAsync();

        }
        else Snackbar.Add($"Error: {response.StatusCode}", MudBlazor.Severity.Error);
    }

    private async Task DeleteClick(int playlistId)
    {
        Snackbar.Add("Commit Delete Handler Invoked");

        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();

        if (result == true)
        {
            string reqAdress = $"api/Playlists/{playlistId}";
            var playlist = await Http.GetFromJsonAsync<Playlist>(reqAdress);
            if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {playlist.PlaylistName} ({playlist.Id}) Record?"))
            {
                await Http.DeleteAsync($"api/Playlists/{playlistId}");
                Snackbar.Add("Deleted Successfull", MudBlazor.Severity.Success);
                StateHasChanged();
                await OnInitializedAsync();

            }
        }
    }

    private async Task OnCreateClick()
    {
        Snackbar.Add("Create Handler Invoked");

        playlistToCreate.UpdateDate = DateTime.Now; //TODO

        if (Formatters.ConvertSpotifyLinkToUri(playlistToCreate.PlaylistId) != null && Formatters.ConvertSpotifyLinkToUri(playlistToCreate.PlaylistId) != "")
            playlistToCreate.PlaylistId = Formatters.ConvertSpotifyLinkToUri(playlistToCreate.PlaylistId);

        var response = await Http.PostAsJsonAsync("api/Playlists", playlistToCreate);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Create Successfull", MudBlazor.Severity.Success);
            playlistToCreate = new Playlist();
            StateHasChanged();
            await OnInitializedAsync();

        }
        else { Snackbar.Add($"Error: {response.StatusCode}", MudBlazor.Severity.Error); };
    }

    private IEnumerable<string> CheckUri(string uri)
    {
        playlistToCreate.PlaylistName = "";
        playlistToCreate.ImageUrl = "";
        playlistImage = "";

        if (string.IsNullOrWhiteSpace(uri))
        {
            yield return "URI is required!";
            yield break;
        }

        string pattern1 = @"^spotify:playlist:\w*";
        string pattern2 = @"https://open.spotify.com/playlist/\w*";

        if (!Regex.IsMatch(uri, pattern2, RegexOptions.IgnoreCase) && !Regex.IsMatch(uri, pattern1, RegexOptions.IgnoreCase))
        {
            yield return "Format Error: https://open.spotify.com/playlist/abc?si=";
        }

        UpdateNameField();
        StateHasChanged();
    }

    private async void UpdateNameField()
    {
        if (string.IsNullOrWhiteSpace(spotiNameField.Value))
        {
            if (Formatters.GetIdFromSpotifyLink(spotiLinkField.Value) != null && Formatters.GetIdFromSpotifyLink(spotiLinkField.Value) != "" && spotiLinkField.Value != null)
            {
                var idToFind = Formatters.GetIdFromSpotifyLink(spotiLinkField.Value);
                playlistToCreate.PlaylistName = await GetPlaylistNameFromSpotify(idToFind);
            }
        }
    }


    private async Task<string> GetPlaylistNameFromSpotify(string id)
    {
        //Api request
        string reqAdress = $"api/Spotify/name?id={id}";
        var response = await Http.GetFromJsonAsync<object>(reqAdress);

        string jsonString = JsonSerializer.Serialize(response);
        var playlistInfo = JsonSerializer.Deserialize<SpotifyAPIPlaylist>(jsonString);

        playlistImage = playlistInfo.Images.First().Url;
        playlistToCreate.ImageUrl = playlistImage;
        playlistToCreate.PlaylistName = playlistInfo.Name;
        playlistToCreate.FollowersTotal = playlistInfo.Followers.Total;

        StateHasChanged();
        return playlistInfo.Name;
    }

    private async Task UpdatePlaylistImagesAndFollowers()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add($"Update started", MudBlazor.Severity.Normal);

        for (int i = 0; i < Playlists.Count(); i++)
        {
            var playlist = Playlists.ToList()[i];
            var uri = playlist.PlaylistId;
            var id = Formatters.GetIdFromSpotifyUri(uri);

            string reqAdress = $"api/Spotify/name?id={id}";
            var response = await Http.GetFromJsonAsync<object>(reqAdress);

            string jsonString = JsonSerializer.Serialize(response);
            var playlistInfo = JsonSerializer.Deserialize<SpotifyAPIPlaylist>(jsonString);

            playlist.ImageUrl = playlistInfo.Images.First().Url;
            playlist.FollowersTotal = playlistInfo.Followers.Total;
            playlist.UpdateDate = DateTime.Now; //TODO

            string reqAdress2 = $"api/Playlists/{playlist.Id}";
            var response2 = await Http.PutAsJsonAsync(reqAdress2, playlist);
            if (response2.IsSuccessStatusCode)
            {
                //Snackbar.Add("Edited Successfull", MudBlazor.Severity.Success);
                //await OnInitializedAsync();
                //StateHasChanged();
            }
            else Snackbar.Add($"Error: {response2.StatusCode}", MudBlazor.Severity.Error);

            UpdateProgressValue = (int)ExtensionMethod.Map(i, 0, Playlists.Count(), 0, 100);

            StateHasChanged();
        }
        Snackbar.Add($"Update Finished", MudBlazor.Severity.Info);
        //StateHasChanged();
        await OnInitializedAsync();
    }

    private IEnumerable<string> CheckName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            yield return "Name is required!";
            yield break;
        }

        foreach (var pl in Playlists)
        {
            if (pl.PlaylistName == name)
                yield return "This name already exist!";
        }

    }

    protected async Task SelectStatusModal()
    {
        //ChangeStatusForm f = new ChangeStatusForm();

        //bool? result = await ChangeStatusForm.Form.mbox.Show();
        //state = result == null ? "Cancelled" : "Deleted!";
        //StateHasChanged();

        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeInOut(0.1)
        };

        var messageForm = Modal.Show<ChangeStatusForm>("Change Status", options);
        var result = await messageForm.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Console.WriteLine(result.Data);
            foreach (var playlist in selectedItems)
            {
                playlist.UpdateDate = DateTime.Now;
                playlist.Status = (int)result.Data;

                string reqAdress = $"api/Playlists/{playlist.Id}";
                var response = await Http.PutAsJsonAsync(reqAdress, playlist);
                if (response.IsSuccessStatusCode)
                {
                    string msg = $"Edited {playlist.Id} Successfull";
                    Snackbar.Add(msg, MudBlazor.Severity.Success);
                    await OnInitializedAsync();
                }
                else Snackbar.Add($"Error: {response.StatusCode}", MudBlazor.Severity.Error);

            }
        }

    }

    protected async Task DeleteSelected()
    {
        Snackbar.Add("Commit Delete Handler Invoked");

        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();

        if (result == true)
        {
            if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete selected playlists?"))
            {
                foreach (var playlist in selectedItems)
                {
                    var response = await Http.DeleteAsync($"api/Playlists/{playlist.Id}");

                    if (response.IsSuccessStatusCode)
                    {
                        StateHasChanged();
                    }
                    else Snackbar.Add($"Error: {response.StatusCode}", MudBlazor.Severity.Error);

                }
                Snackbar.Add("Deleted Successfull", MudBlazor.Severity.Success);
                await OnInitializedAsync();
            }
        }

    }

    private async void ExportPlaylistData()
    {
        string exportFileName = "exportPlaylists_" + DateTime.Now.ToString("dd_MM_yyyy") + ".json";

        var currentPlaylistsJsonString = await Http.GetFromJsonAsync<string>("api/Playlists/export");

        await module.InvokeAsync<object>("FileSaveAs",
        exportFileName,
        currentPlaylistsJsonString);
    }


    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        ////Upload the files here
        //Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        //Snackbar.Add("TODO: Upload your files!", Severity.Normal);

        //var entries = e.GetMultipleFiles();

        var browserFile = e.File;
        //await using FileStream fs = new(path, FileMode.Create);
        //await browserFile.OpenReadStream().CopyToAsync(fs);

        //Do your validations here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        //Snackbar.Add($"Files with {browserFile.Size} bytes size are not allowed", MudBlazor.Severity.Error);
        Snackbar.Add($"Files starting with letter {browserFile.Name.Substring(0, 1)} are not recommended", MudBlazor.Severity.Warning);
        Snackbar.Add($"This file has the extension {browserFile.Name.Split(".").Last()}", MudBlazor.Severity.Info);

        //Snackbar.Add($"Files with {entries.FirstOrDefault().Size} bytes size are not allowed", MudBlazor.Severity.Error);
        //Snackbar.Add($"Files starting with letter {entries.FirstOrDefault().Name.Substring(0, 1)} are not recommended", MudBlazor.Severity.Warning);
        //Snackbar.Add($"This file has the extension {entries.FirstOrDefault().Name.Split(".").Last()}", MudBlazor.Severity.Info);

        //TODO upload the files to the server
        await using FileStream fs = new FileStream("importPlaylist.json", FileMode.Create);
        await browserFile.OpenReadStream().CopyToAsync(fs);

        // To read the file, create a FileStream.
        var myFileStream = new FileStream("importPlaylist.json", FileMode.Open);
        // Call the Deserialize method and cast to the object type.
        var parsedImportedPlaylistObjectList = await JsonSerializer.DeserializeAsync<List<Playlist>>(myFileStream);


        bool? result = await mboxImport.Show();
        state = result == null ? "Cancelled" : "Upload!";
        StateHasChanged();

        if (result == true)
        {
            string reqAdress = $"api/Playlists/";
            if (await js.InvokeAsync<bool>("confirm", $"Do you want to import playlists?"))
            {
                foreach (var playlistEntity in parsedImportedPlaylistObjectList)
                {
                    var isPlaylistExist = await Http.GetFromJsonAsync<Playlist>($"api/Playlists/{playlistEntity.PlaylistId}");
                    if (isPlaylistExist != null)
                        continue;

                    var playlist = await Http.PostAsJsonAsync<Playlist>(reqAdress, playlistEntity);
                    if (playlist.IsSuccessStatusCode == true)
                        Snackbar.Add($"Imported {playlistEntity.PlaylistName} Successfull", MudBlazor.Severity.Success);
                    else Snackbar.Add($"Import {playlistEntity.PlaylistName} failed \nStatus: {playlist.StatusCode}", MudBlazor.Severity.Error);
                    StateHasChanged();
                }
                await OnInitializedAsync();
            }
        }
    }

    public void ToggleImagePreviewOpen(MouseEventArgs e)
    {
        if (_isOpenImagePlaylist)
            _isOpenImagePlaylist = false;
        else
            _isOpenImagePlaylist = true;
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await module.DisposeAsync();
    }
}
